// script.js
// ... (Todo tu código anterior: URL, refs globales, código menú hamburguesa, closeMobileMenu, etc.) ...

// --- Función Opcional para mostrar secciones (AJUSTADA) ---
function mostrarSeccion(idSeccion) {
    console.log("Mostrando sección:", idSeccion);
    // Ocultar todas las secciones principales directamente dentro de main
    const secciones = document.querySelectorAll('.main-content > section[id]');
    secciones.forEach(sec => {
        sec.style.display = 'none';
    });

    // Mostrar la sección solicitada
    const seccionActiva = document.getElementById(idSeccion);
    if (seccionActiva) {
        seccionActiva.style.display = 'block';
        console.log("Sección", idSeccion, "mostrada.");
         // Si la sección es la de KPIs, asegúrate que sus sub-contenedores sean visibles si es necesario
         if(idSeccion === 'kpi-content') {
             if(tablaContainer) tablaContainer.style.display = 'block'; // O como se muestre normalmente
             // Decide si quieres mostrar el gráfico por defecto aquí o solo con mostrarKPIs()
             // if(chartContainer) chartContainer.style.display = 'block';
         }
    } else {
        console.warn("No se encontró la sección con ID:", idSeccion);
        // Volver a KPIs si la sección no existe
        mostrarKPIs();
    }
    closeMobileMenu();
}

// --- Modifica tu listener DOMContentLoaded ---
document.addEventListener('DOMContentLoaded', () => {
    // ... (Obtener todas las referencias DOM, incluyendo kpiContent si existe) ...
    let kpiContent = document.getElementById('kpi-content'); // Obtener referencia a la nueva sección contenedora

     // ... (Verificar todas las referencias) ...

    // ... (Inicializar gráfico, listener hamburguesa) ...

    // --- Añadir listeners a los enlaces de sección (AJUSTADO) ---
    const enlacesSeccion = document.querySelectorAll('.nav-links a[href^="#"]');
    enlacesSeccion.forEach(enlace => {
        // Excluir los que llaman explícitamente a mostrarKPIs/mostrarFaltantes
        const onclickAttr = enlace.getAttribute('onclick');
        if (!onclickAttr || (!onclickAttr.includes('mostrarKPIs') && !onclickAttr.includes('mostrarFaltantes'))) {
             const href = enlace.getAttribute('href');
             if (href && href.length > 1) {
                 const idSeccion = href.substring(1);
                 if (document.getElementById(idSeccion)) {
                     enlace.addEventListener('click', (event) => {
                         event.preventDefault();
                         mostrarSeccion(idSeccion);
                     });
                     console.log("Listener añadido para mostrar sección:", idSeccion);
                 } else {
                      console.warn("El elemento para el enlace", href, "no existe.");
                 }
             }
        }
    });

    // ... (Resto de la inicialización) ...
     // Ocultar todas las secciones específicas al inicio, excepto quizás #kpi-content si es la default
    document.querySelectorAll('.main-content > section[id]').forEach(sec => {
        // Puedes decidir mostrar kpi-content por defecto o llamar a mostrarKPIs()
         if(sec.id !== 'kpi-content') { // Oculta todas menos la de kpis/faltantes
            sec.style.display = 'none';
         } else {
            sec.style.display = 'none'; // Ocultar kpi-content también inicialmente
         }
    });
     // Llamar a mostrarKPIs() para la vista inicial
     mostrarKPIs();

});

// --- Modifica tus funciones mostrarKPIs y mostrarFaltantes (AJUSTADAS) ---
function mostrarKPIs() {
    console.log("Función mostrarKPIs() llamada.");
    if (!loader) return;

    // Ocultar todas las secciones EXCEPTO el contenedor kpi-content
    document.querySelectorAll('.main-content > section[id]').forEach(sec => {
        if (sec.id !== 'kpi-content') {
            sec.style.display = 'none';
        } else {
            sec.style.display = 'block'; // Mostrar el contenedor padre
        }
    });
    if (errorContainer) errorContainer.innerHTML = '';
    if (loader) loader.style.display = 'block'; // Mostrar loader dentro de su contenedor
    if (tablaDatos) tablaDatos.style.display = 'none'; // Ocultar tabla mientras carga
    if (chartContainer) chartContainer.style.display = 'none'; // Ocultar gráfico mientras carga

    // ... (Fetch y procesamiento como antes) ...
    fetch(`${APPS_SCRIPT_URL}?action=kpis`)
        .then(response => { /* ... */ return response.json(); })
        .then(data => {
            // ... (procesar data) ...
            if (loader) loader.style.display = 'none';
            if (tablaContainer) tablaContainer.style.display = 'block'; // Mostrar sub-contenedor
            if (tablaDatos) tablaDatos.style.display = 'table';
            if (chartContainer) chartContainer.style.display = 'block'; // Mostrar sub-contenedor
            if (kpiChartCanvas) kpiChartCanvas.style.display = 'block';
            popularTablaKPIs(data);
            actualizarGraficoKPIs(data);
        })
        .catch(error => { /* ... */ mostrarError(`Error al cargar KPIs: ${error.message}`); });
}

function mostrarFaltantes() {
    console.log("Función mostrarFaltantes() llamada.");
    if (!loader) return;

    // Ocultar todas las secciones EXCEPTO el contenedor kpi-content
     document.querySelectorAll('.main-content > section[id]').forEach(sec => {
        if (sec.id !== 'kpi-content') {
            sec.style.display = 'none';
        } else {
             sec.style.display = 'block'; // Mostrar el contenedor padre
        }
    });
    // Ocultar específicamente el gráfico dentro de kpi-content
    if (chartContainer) chartContainer.style.display = 'none';
    if (errorContainer) errorContainer.innerHTML = '';
    if (loader) loader.style.display = 'block';
    if (tablaDatos) tablaDatos.style.display = 'none';

    // ... (Fetch y procesamiento como antes) ...
     fetch(`${APPS_SCRIPT_URL}?action=faltantes`)
        .then(response => { /* ... */ return response.json(); })
        .then(data => {
            // ... (procesar data) ...
             if (loader) loader.style.display = 'none';
             if (tablaContainer) tablaContainer.style.display = 'block'; // Mostrar sub-contenedor
             if (tablaDatos) tablaDatos.style.display = 'table';
             popularTablaFaltantes(data);
        })
        .catch(error => { /* ... */ mostrarError(`Error al cargar Faltantes: ${error.message}`); });
}

// ... (El resto de tu código JS sin cambios: closeMobileMenu, limpiarContenido, mostrarError, popularTablas, actualizarGrafico, inicializarGrafico) ...